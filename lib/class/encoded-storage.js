"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodedWebStore = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _storage2 = require("./storage");
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var _storage = /*#__PURE__*/new WeakMap();
class EncodedWebStore extends _storage2.WebStore {
  /**
   * 
   * @param storage Storage interface to be used and initialized.
   */
  constructor(storage) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';
    super(storage, delimiter);
    /**
     * Web store to be used for this session.
     */
    _classPrivateFieldInitSpec(this, _storage, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _storage, storage);
  }
  getItem(key) {
    var stringified = _classPrivateFieldGet(this, _storage).getItem(key);
    var decoded = window.atob(stringified);
    var converted = JSON.parse(decoded);
    return converted;
  }
  setItem(key, value) {
    try {
      var stringified = JSON.stringify(value);
      var encodedString = window.btoa(stringified);
      _classPrivateFieldGet(this, _storage).setItem(key, encodedString);
      return true;
    } catch (error) {
      throw error;
    }
  }
}
exports.EncodedWebStore = EncodedWebStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RvcmFnZTIiLCJyZXF1aXJlIiwiX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMiLCJvYmoiLCJwcml2YXRlTWFwIiwidmFsdWUiLCJfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbiIsInNldCIsInByaXZhdGVDb2xsZWN0aW9uIiwiaGFzIiwiVHlwZUVycm9yIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicmVjZWl2ZXIiLCJkZXNjcmlwdG9yIiwiX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvciIsIl9jbGFzc0FwcGx5RGVzY3JpcHRvckdldCIsImdldCIsImNhbGwiLCJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCJfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQiLCJhY3Rpb24iLCJ3cml0YWJsZSIsIl9zdG9yYWdlIiwiV2Vha01hcCIsIkVuY29kZWRXZWJTdG9yZSIsIldlYlN0b3JlIiwiY29uc3RydWN0b3IiLCJzdG9yYWdlIiwiZGVsaW1pdGVyIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZ2V0SXRlbSIsImtleSIsInN0cmluZ2lmaWVkIiwiZGVjb2RlZCIsIndpbmRvdyIsImF0b2IiLCJjb252ZXJ0ZWQiLCJKU09OIiwicGFyc2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZW5jb2RlZFN0cmluZyIsImJ0b2EiLCJlcnJvciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xhc3MvZW5jb2RlZC1zdG9yYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgS2V5UGF0aCxcbiAgICBTdG9yYWdlVmFsdWUsXG4gICAgU3RvcmFnZVxufSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBXZWJTdG9yZSB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuZXhwb3J0IGNsYXNzIEVuY29kZWRXZWJTdG9yZSBleHRlbmRzIFdlYlN0b3JlIHtcbiAgICAvKipcbiAgICAgKiBXZWIgc3RvcmUgdG8gYmUgdXNlZCBmb3IgdGhpcyBzZXNzaW9uLlxuICAgICAqL1xuICAgICNzdG9yYWdlOiBTdG9yYWdlO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHN0b3JhZ2UgU3RvcmFnZSBpbnRlcmZhY2UgdG8gYmUgdXNlZCBhbmQgaW5pdGlhbGl6ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RvcmFnZTogU3RvcmFnZSwgZGVsaW1pdGVyOiBzdHJpbmcgPSAnLicpIHtcbiAgICAgICAgc3VwZXIoc3RvcmFnZSwgZGVsaW1pdGVyKTtcbiAgICAgICAgdGhpcy4jc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShrZXk6IEtleVBhdGgpOiBTdG9yYWdlVmFsdWUge1xuICAgICAgICBjb25zdCBzdHJpbmdpZmllZCA9IHRoaXMuI3N0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gd2luZG93LmF0b2Ioc3RyaW5naWZpZWQpO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBKU09OLnBhcnNlKGRlY29kZWQpO1xuICAgICAgICByZXR1cm4gY29udmVydGVkO1xuICAgIH1cblxuICAgIHNldEl0ZW0oa2V5OiBLZXlQYXRoLCB2YWx1ZTogU3RvcmFnZVZhbHVlKTogYm9vbGVhbiB8IEVycm9yIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZFN0cmluZyA9IHdpbmRvdy5idG9hKHN0cmluZ2lmaWVkKTtcbiAgICAgICAgICAgIHRoaXMuI3N0b3JhZ2Uuc2V0SXRlbShrZXksIGVuY29kZWRTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7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