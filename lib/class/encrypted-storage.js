"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncryptedWebStore = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _storage2 = require("./storage");
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var _storage = /*#__PURE__*/new WeakMap();
var _cryptor = /*#__PURE__*/new WeakMap();
class EncryptedWebStore extends _storage2.WebStore {
  /**
   * 
   * @param storage Storage interface to be used and initialized.
   */
  constructor(storage, cryptor) {
    var delimiter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
    super(storage, delimiter);
    /**
     * Web store to be used for this session.
     */
    _classPrivateFieldInitSpec(this, _storage, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _cryptor, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _storage, storage);
    _classPrivateFieldSet(this, _cryptor, cryptor);
  }
  getItem(key) {
    var stringified = _classPrivateFieldGet(this, _storage).getItem(key);
    var decoded = _classPrivateFieldGet(this, _cryptor).decrypt(stringified);
    if (decoded) {
      var converted = JSON.parse(decoded);
      return converted;
    }
    return null;
  }
  setItem(key, value) {
    try {
      var stringified = JSON.stringify(value);
      var encodedString = _classPrivateFieldGet(this, _cryptor).encrypt(stringified);
      _classPrivateFieldGet(this, _storage).setItem(key, encodedString);
      return true;
    } catch (error) {
      throw error;
    }
  }
  getEncryptedRawItem(key) {
    return _classPrivateFieldGet(this, _storage).getItem(key);
  }
  setEncryptedRawItem(key, value) {
    try {
      _classPrivateFieldGet(this, _storage).setItem(key, value);
      return true;
    } catch (error) {
      throw error;
    }
  }
}
exports.EncryptedWebStore = EncryptedWebStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RvcmFnZTIiLCJyZXF1aXJlIiwiX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMiLCJvYmoiLCJwcml2YXRlTWFwIiwidmFsdWUiLCJfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbiIsInNldCIsInByaXZhdGVDb2xsZWN0aW9uIiwiaGFzIiwiVHlwZUVycm9yIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicmVjZWl2ZXIiLCJkZXNjcmlwdG9yIiwiX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvciIsIl9jbGFzc0FwcGx5RGVzY3JpcHRvckdldCIsImdldCIsImNhbGwiLCJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCJfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQiLCJhY3Rpb24iLCJ3cml0YWJsZSIsIl9zdG9yYWdlIiwiV2Vha01hcCIsIl9jcnlwdG9yIiwiRW5jcnlwdGVkV2ViU3RvcmUiLCJXZWJTdG9yZSIsImNvbnN0cnVjdG9yIiwic3RvcmFnZSIsImNyeXB0b3IiLCJkZWxpbWl0ZXIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJnZXRJdGVtIiwia2V5Iiwic3RyaW5naWZpZWQiLCJkZWNvZGVkIiwiZGVjcnlwdCIsImNvbnZlcnRlZCIsIkpTT04iLCJwYXJzZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJlbmNvZGVkU3RyaW5nIiwiZW5jcnlwdCIsImVycm9yIiwiZ2V0RW5jcnlwdGVkUmF3SXRlbSIsInNldEVuY3J5cHRlZFJhd0l0ZW0iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzL2VuY3J5cHRlZC1zdG9yYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgS2V5UGF0aCxcbiAgICBTdG9yYWdlVmFsdWUsXG4gICAgU3RvcmFnZSxcbiAgICBFbmNyeXB0ZWRXZWJTdG9yYWdlXG59IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IFdlYlN0b3JlIH0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgQ3J5cHRvciB9IGZyb20gXCIuL2NyeXB0b3JcIjtcblxuZXhwb3J0IGNsYXNzIEVuY3J5cHRlZFdlYlN0b3JlIGV4dGVuZHMgV2ViU3RvcmUgaW1wbGVtZW50cyBFbmNyeXB0ZWRXZWJTdG9yYWdlIHtcbiAgICAvKipcbiAgICAgKiBXZWIgc3RvcmUgdG8gYmUgdXNlZCBmb3IgdGhpcyBzZXNzaW9uLlxuICAgICAqL1xuICAgICNzdG9yYWdlOiBTdG9yYWdlO1xuICAgICNjcnlwdG9yOiBDcnlwdG9yO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHN0b3JhZ2UgU3RvcmFnZSBpbnRlcmZhY2UgdG8gYmUgdXNlZCBhbmQgaW5pdGlhbGl6ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RvcmFnZTogU3RvcmFnZSwgY3J5cHRvcjogQ3J5cHRvciwgZGVsaW1pdGVyOiBzdHJpbmcgPSAnLicpIHtcbiAgICAgICAgc3VwZXIoc3RvcmFnZSwgZGVsaW1pdGVyKTtcbiAgICAgICAgdGhpcy4jc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgICAgIHRoaXMuI2NyeXB0b3IgPSBjcnlwdG9yO1xuICAgIH1cblxuICAgIGdldEl0ZW0oa2V5OiBLZXlQYXRoKTogU3RvcmFnZVZhbHVlIHtcbiAgICAgICAgY29uc3Qgc3RyaW5naWZpZWQgPSB0aGlzLiNzdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuI2NyeXB0b3IuZGVjcnlwdChzdHJpbmdpZmllZCk7XG4gICAgICAgIGlmIChkZWNvZGVkKSB7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBKU09OLnBhcnNlKGRlY29kZWQpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzZXRJdGVtKGtleTogS2V5UGF0aCwgdmFsdWU6IFN0b3JhZ2VWYWx1ZSk6IGJvb2xlYW4gfCBFcnJvciB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRTdHJpbmcgPSB0aGlzLiNjcnlwdG9yLmVuY3J5cHQoc3RyaW5naWZpZWQpO1xuICAgICAgICAgICAgdGhpcy4jc3RvcmFnZS5zZXRJdGVtKGtleSwgZW5jb2RlZFN0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RW5jcnlwdGVkUmF3SXRlbShrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgfVxuXG4gICAgc2V0RW5jcnlwdGVkUmF3SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGJvb2xlYW4gfCBFcnJvciB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLiNzdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFNQSxJQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFBcUMsU0FBQUMsMkJBQUFDLEdBQUEsRUFBQUMsVUFBQSxFQUFBQyxLQUFBLElBQUFDLDBCQUFBLENBQUFILEdBQUEsRUFBQUMsVUFBQSxHQUFBQSxVQUFBLENBQUFHLEdBQUEsQ0FBQUosR0FBQSxFQUFBRSxLQUFBO0FBQUEsU0FBQUMsMkJBQUFILEdBQUEsRUFBQUssaUJBQUEsUUFBQUEsaUJBQUEsQ0FBQUMsR0FBQSxDQUFBTixHQUFBLGVBQUFPLFNBQUE7QUFBQSxTQUFB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