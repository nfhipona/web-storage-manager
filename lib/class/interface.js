"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzL2ludGVyZmFjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3RvcmFnZVxuXG5leHBvcnQgdHlwZSBLZXlQYXRoID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgU3RvcmFnZVZhbHVlID0gYW55O1xuZXhwb3J0IHR5cGUgU3RvcmFnZUl0ZW0gPSB7IGtleTogS2V5UGF0aDsgdmFsdWU6IFN0b3JhZ2VWYWx1ZSB9O1xuXG4vKipcbiAqIEF0dHJpYnV0ZSBjb21wYXJlIHdpbGwgd29yayBmb3IgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zIHdoZXJlIHZhbHVlcyBtYXRjaCBvciB3aWxsIHJlcGxhY2UgYSB2YWx1ZSBvZiB0aGUgbWF0Y2hlZCBrZXkgZm9yIGRhdGEgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IHR5cGUgQXR0cmlidXRlQ29tcGFyZSA9IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIH07XG5cbmV4cG9ydCB0eXBlIFN0b3JhZ2UgPSB7XG4gIC8qKlxuICAgKiBrZXlwYXRoIGRlbGltZXRlci4gZGVmYXVsdHMgdG8gJy4nLlxuICAgKi9cbiAgZGVsaW1pdGVyOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBkYXRhIGl0ZW1zIHN0b3JlZCBpbiB0aGUgU3RvcmFnZSBvYmplY3QuXG4gICAqL1xuICBnZXQgbGVuZ3RoKCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGRhdGEgaXRlbXMgc3RvcmVkIGluIHRoZSBTdG9yYWdlIG9iamVjdC5cbiAgICogQHBhcmFtIG4gV2hlbiBwYXNzZWQgYSBudW1iZXIgbiwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIG5hbWUgb2YgdGhlIG50aCBrZXkgaW4gdGhlIHN0b3JhZ2UuXG4gICAqL1xuICBrZXkobjogbnVtYmVyKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJldHVybiB0aGF0IGtleSdzIHZhbHVlLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXkgbmFtZS5cbiAgICovXG4gIGdldEl0ZW0oa2V5OiBLZXlQYXRoKTogU3RvcmFnZVZhbHVlO1xuXG4gIC8qKlxuICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lIGFuZCB2YWx1ZSwgd2lsbCBhZGQgdGhhdCBrZXkgdG8gdGhlIHN0b3JhZ2UsIG9yIHVwZGF0ZSB0aGF0IGtleSdzIHZhbHVlIGlmIGl0IGFscmVhZHkgZXhpc3RzLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBrZXkgeW91IHdhbnQgdG8gY3JlYXRlL3VwZGF0ZS5cbiAgICogQHBhcmFtIHtTdG9yYWdlVmFsdWV9IHZhbHVlIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHZhbHVlIHlvdSB3YW50IHRvIGdpdmUgdGhlIGtleSB5b3UgYXJlIGNyZWF0aW5nL3VwZGF0aW5nLlxuICAgKi9cbiAgc2V0SXRlbShrZXk6IEtleVBhdGgsIHZhbHVlOiBTdG9yYWdlVmFsdWUpOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgLyoqXG4gICAqIFdoZW4gcGFzc2VkIGEga2V5IG5hbWUsIHdpbGwgcmVtb3ZlIHRoYXQga2V5IGZyb20gdGhlIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGtleSB5b3Ugd2FudCB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogS2V5UGF0aCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFdoZW4gaW52b2tlZCwgd2lsbCBlbXB0eSBhbGwga2V5cyBvdXQgb2YgdGhlIHN0b3JhZ2UuXG4gICAqL1xuICBjbGVhcigpOiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgV2ViU3RvcmFnZSA9IFN0b3JhZ2UgJiB7XG4gIC8qKlxuICAgKiBBZGQgbXVsdGlwbGUgZW50cmllcyBvZiBrZXkgdmFsdWUgcGFpcnMgdG8gdGhlIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7U3RvcmFnZUl0ZW1bXX0gaXRlbXMgSXRlbXMgdG8gYWRkIGluZGl2aWR1YWxseSBpbiB0aGUgc3RvcmFnZS5cbiAgICovXG4gIHNldE11bHRpcGxlSXRlbXMoaXRlbXM6IFN0b3JhZ2VJdGVtW10pOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBtdWx0aXBsZSBlbnRyaWVzIGZvdW5kIGluIHRoZSBzcGVjaWZpZWQga2V5cGF0aHMuXG4gICAqIFdpbGwgb25seSB3b3JrIG9uIHRvcCBsZXZlbCBrZXlwYXRocyBhbmQgd2lsbCBub3QgdXRpbGl6ZSBhbiBgQXR0cmlidXRlQ29tcGFyZWAuXG4gICAqIFVzZSBgcmVtb3ZlSXRlbUluSXRlbWAgdG8gdXRpbGl6ZSBhbiBgQXR0cmlidXRlQ29tcGFyZWAuXG4gICAqIEBwYXJhbSB7S2V5UGF0aFtdfSBrZXlzXG4gICAqL1xuICByZW1vdmVNdWx0aXBsZUl0ZW1zKGtleXM6IEtleVBhdGhbXSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbXVsdGlwbGUgZW50cmllcyBmb3VuZCBpbiB0aGUgc3BlY2lmaWVkIGtleXBhdGhzLlxuICAgKiBXaWxsIG9ubHkgd29yayBvbiB0b3AgbGV2ZWwga2V5cGF0aHMgYW5kIHdpbGwgbm90IHV0aWxpemUgYW4gYEF0dHJpYnV0ZUNvbXBhcmVgLlxuICAgKiBVc2UgYGdldEl0ZW1Jbkl0ZW1gIHRvIHV0aWxpemUgYW4gYEF0dHJpYnV0ZUNvbXBhcmVgLlxuICAgKiBAcGFyYW0ge0tleVBhdGhbXX0ga2V5c1xuICAgKi9cbiAgZ2V0TXVsdGlwbGVJdGVtcyhrZXlzOiBLZXlQYXRoW10pOiBTdG9yYWdlVmFsdWVbXTtcblxuICAvKipcbiAgICogQXBwZW5kIGl0ZW0gdG8gYW4gZXhpc3RpbmcgaXRlbSBvbiB0aGUgc3RvcmFnZS4gV29ya3MgZm9yIG9iamVjdCBhbmQgYXJyYXkgdHlwZSBkYXRhLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXlwYXRoIG9mIHRoZSBkYXRhIHlvdSB3YW50IHRvIGFwcGVuZCB0by5cbiAgICogQHBhcmFtIHtTdG9yYWdlVmFsdWV9IHZhbHVlIGRhdGEgdmFsdWUgeW91IHdhbnQgdG8gYXBwZW5kIHRvLlxuICAgKi9cbiAgYXBwZW5kSXRlbUluSXRlbShrZXk6IEtleVBhdGgsIHZhbHVlOiBTdG9yYWdlVmFsdWUpOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW4gaXRlbSBpbiB0aGUgc3BlY2lmaWVkIGtleXBhdGguXG4gICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IGtleXBhdGggb2YgdGhlIGRhdGEuXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlQ29tcGFyZX0gYXR0ckNvbXBhcmUgZGF0YSBrZXkgYXR0cmlidXRlIHRvIGJlIHVwZGF0ZWQuXG4gICAqL1xuICB1cGRhdGVJdGVtSW5JdGVtKFxuICAgIGtleTogS2V5UGF0aCxcbiAgICBhdHRyQ29tcGFyZTogQXR0cmlidXRlQ29tcGFyZSB8IG51bGwsXG4gICAgbmV3VmFsdWU6IFN0b3JhZ2VWYWx1ZSxcbiAgKTogYm9vbGVhbiB8IEVycm9yO1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGl0ZW0gaW4gdGhlIHNwZWNpZmllZCBrZXlwYXRoLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXlwYXRoIG9mIHRoZSBkYXRhLlxuICAgKiBAcGFyYW0ge0F0dHJpYnV0ZUNvbXBhcmV9IGF0dHJDb21wYXJlIGRhdGEga2V5IGF0dHJpYnV0ZSB0byBiZSB1cGRhdGVkLlxuICAgKi9cbiAgcmVtb3ZlSXRlbUluSXRlbShcbiAgICBrZXk6IEtleVBhdGgsXG4gICAgYXR0ckNvbXBhcmU/OiBBdHRyaWJ1dGVDb21wYXJlLFxuICApOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGF0YSBmb3VuZCBpbiB0aGUgc3BlY2lmaWVkIGtleXBhdGguXG4gICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IGtleXBhdGggb2YgdGhlIGRhdGEuXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlQ29tcGFyZX0gYXR0ckNvbXBhcmUgZGF0YSBrZXkgYXR0cmlidXRlIHRvIGJlIHVwZGF0ZWQuXG4gICAqL1xuICBnZXRJdGVtSW5JdGVtKGtleTogS2V5UGF0aCwgYXR0ckNvbXBhcmU/OiBBdHRyaWJ1dGVDb21wYXJlKTogU3RvcmFnZVZhbHVlO1xufTtcblxuZXhwb3J0IHR5cGUgRW5jcnlwdGVkV2ViU3RvcmFnZSA9IFN0b3JhZ2UgJiB7XG4gIC8qKlxuICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJldHVybiB0aGF0IGtleSdzIHZhbHVlLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXkgbmFtZS5cbiAgICovXG4gIGdldEVuY3J5cHRlZFJhd0l0ZW0oa2V5OiBLZXlQYXRoKTogU3RvcmFnZVZhbHVlO1xuXG4gIC8qKlxuICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lIGFuZCB2YWx1ZSwgd2lsbCBhZGQgdGhhdCBrZXkgdG8gdGhlIHN0b3JhZ2UsIG9yIHVwZGF0ZSB0aGF0IGtleSdzIHZhbHVlIGlmIGl0IGFscmVhZHkgZXhpc3RzLlxuICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBrZXkgeW91IHdhbnQgdG8gY3JlYXRlL3VwZGF0ZS5cbiAgICogQHBhcmFtIHtTdG9yYWdlVmFsdWV9IHZhbHVlIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHZhbHVlIHlvdSB3YW50IHRvIGdpdmUgdGhlIGtleSB5b3UgYXJlIGNyZWF0aW5nL3VwZGF0aW5nLlxuICAgKi9cbiAgc2V0RW5jcnlwdGVkUmF3SXRlbShrZXk6IEtleVBhdGgsIHZhbHVlOiBTdG9yYWdlVmFsdWUpOiBib29sZWFuIHwgRXJyb3I7XG59O1xuXG4vKipcbiAqIENyeXB0b3IgaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCB0eXBlIENyeXB0b3JPcHRpb24gPSB7XG4gIHNhbHQ6IHN0cmluZyB8IEJ1ZmZlcjtcbiAga2V5TGVuZ3RoOiBudW1iZXI7XG4gIGFsZ29yaXRobTogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nIHwgQnVmZmVyO1xuICBieXRlTGVuZ3RoOiBudW1iZXI7IC8vIEJ1ZmZlclxufTtcblxuZXhwb3J0IHR5cGUgS2V5T3B0aW9uID0gc3RyaW5nIHwgbnVsbDtcbmV4cG9ydCB0eXBlIFJldHVybk9wdGlvbiA9IHN0cmluZyB8IG51bGw7XG5leHBvcnQgdHlwZSBWZWN0b3JJViA9IHN0cmluZyB8IG51bGw7XG5cbmV4cG9ydCB0eXBlIENyeXB0b3JNb2RlbCA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNyeXB0b3IncyBjb25maWdzXG4gICAqL1xuICBnZXQgc2V0dGluZ3MoKTogQ3J5cHRvck9wdGlvbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3J5cHRvcidzIGdlbmVyYXRlZCBlbmNyeXB0aW9uIGtleVxuICAgKi9cbiAgZ2V0IGtleSgpOiBLZXlPcHRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNyeXB0b3IncyBpbml0aWFsaXphdGlvbiB2ZWN0b3IuXG4gICAqIE5PVEU6IFRoaXMgaXMgaW1wb3J0YW50IGZvciBkZWNyeXB0aW9uLiBNYWtlIHN1cmUgeW91IHN0b3JlIGl0IHNvbWV3aGVyZSBmb3IgcmV1c2UuXG4gICAqL1xuICBnZXQgaXZIZXgoKTogS2V5T3B0aW9uO1xuXG4gIC8qKlxuICAgKiBFbmNyeXB0IHRoZSBkYXRhIGFuZCBzYXZlIHRvIHN0b3JhZ2UuXG4gICAqL1xuICBlbmNyeXB0KHN1YmplY3Q6IHN0cmluZyk6IFJldHVybk9wdGlvbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVjcnlwdGVkIGRhdGEgZnJvbSBzdG9yYWdlLlxuICAgKi9cbiAgZGVjcnlwdChlbmNyeXB0ZWQ6IHN0cmluZyk6IFJldHVybk9wdGlvbjtcbn07XG4iXSwibWFwcGluZ3MiOiIifQ==