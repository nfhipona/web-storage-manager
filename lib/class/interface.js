"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsYXNzL2ludGVyZmFjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3RvcmFnZVxuXG5leHBvcnQgdHlwZSBLZXlQYXRoID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgU3RvcmFnZVZhbHVlID0gYW55O1xuZXhwb3J0IHR5cGUgU3RvcmFnZUl0ZW0gPSB7IGtleTogS2V5UGF0aCwgdmFsdWU6IFN0b3JhZ2VWYWx1ZSB9O1xuXG4vKipcbiAqIEF0dHJpYnV0ZSBjb21wYXJlIHdpbGwgd29yayBmb3IgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zIHdoZXJlIHZhbHVlcyBtYXRjaCBvciB3aWxsIHJlcGxhY2UgYSB2YWx1ZSBvZiB0aGUgbWF0Y2hlZCBrZXkgZm9yIGRhdGEgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IHR5cGUgQXR0cmlidXRlQ29tcGFyZSA9IHsgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmFnZSB7XG4gICAgLyoqXG4gICAgICoga2V5cGF0aCBkZWxpbWV0ZXIuIGRlZmF1bHRzIHRvICcuJy5cbiAgICAgKi9cbiAgICBkZWxpbWl0ZXI6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBkYXRhIGl0ZW1zIHN0b3JlZCBpbiB0aGUgU3RvcmFnZSBvYmplY3QuXG4gICAgICovXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgZGF0YSBpdGVtcyBzdG9yZWQgaW4gdGhlIFN0b3JhZ2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSBuIFdoZW4gcGFzc2VkIGEgbnVtYmVyIG4sIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBuYW1lIG9mIHRoZSBudGgga2V5IGluIHRoZSBzdG9yYWdlLlxuICAgICAqL1xuICAgIGtleShuOiBudW1iZXIpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJldHVybiB0aGF0IGtleSdzIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IGtleSBuYW1lLlxuICAgICAqL1xuICAgIGdldEl0ZW0oa2V5OiBLZXlQYXRoKTogU3RvcmFnZVZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogV2hlbiBwYXNzZWQgYSBrZXkgbmFtZSBhbmQgdmFsdWUsIHdpbGwgYWRkIHRoYXQga2V5IHRvIHRoZSBzdG9yYWdlLCBvciB1cGRhdGUgdGhhdCBrZXkncyB2YWx1ZSBpZiBpdCBhbHJlYWR5IGV4aXN0cy5cbiAgICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBrZXkgeW91IHdhbnQgdG8gY3JlYXRlL3VwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge1N0b3JhZ2VWYWx1ZX0gdmFsdWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gZ2l2ZSB0aGUga2V5IHlvdSBhcmUgY3JlYXRpbmcvdXBkYXRpbmcuXG4gICAgICovXG4gICAgc2V0SXRlbShrZXk6IEtleVBhdGgsIHZhbHVlOiBTdG9yYWdlVmFsdWUpOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJlbW92ZSB0aGF0IGtleSBmcm9tIHRoZSBzdG9yYWdlLlxuICAgICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGtleSB5b3Ugd2FudCB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlSXRlbShrZXk6IEtleVBhdGgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogV2hlbiBpbnZva2VkLCB3aWxsIGVtcHR5IGFsbCBrZXlzIG91dCBvZiB0aGUgc3RvcmFnZS5cbiAgICAgKi9cbiAgICBjbGVhcigpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYlN0b3JhZ2UgZXh0ZW5kcyBTdG9yYWdlIHtcbiAgICAvKipcbiAgICAgKiBBZGQgbXVsdGlwbGUgZW50cmllcyBvZiBrZXkgdmFsdWUgcGFpcnMgdG8gdGhlIHN0b3JhZ2UuXG4gICAgICogQHBhcmFtIHtTdG9yYWdlSXRlbVtdfSBpdGVtcyBJdGVtcyB0byBhZGQgaW5kaXZpZHVhbGx5IGluIHRoZSBzdG9yYWdlLlxuICAgICAqL1xuICAgIHNldE11bHRpcGxlSXRlbXMoaXRlbXM6IFN0b3JhZ2VJdGVtW10pOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgbXVsdGlwbGUgZW50cmllcyBmb3VuZCBpbiB0aGUgc3BlY2lmaWVkIGtleXBhdGhzLlxuICAgICAqIFdpbGwgb25seSB3b3JrIG9uIHRvcCBsZXZlbCBrZXlwYXRocyBhbmQgd2lsbCBub3QgdXRpbGl6ZSBhbiBgQXR0cmlidXRlQ29tcGFyZWAuXG4gICAgICogVXNlIGByZW1vdmVJdGVtSW5JdGVtYCB0byB1dGlsaXplIGFuIGBBdHRyaWJ1dGVDb21wYXJlYC5cbiAgICAgKiBAcGFyYW0ge0tleVBhdGhbXX0ga2V5cyBcbiAgICAgKi9cbiAgICByZW1vdmVNdWx0aXBsZUl0ZW1zKGtleXM6IEtleVBhdGhbXSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG11bHRpcGxlIGVudHJpZXMgZm91bmQgaW4gdGhlIHNwZWNpZmllZCBrZXlwYXRocy5cbiAgICAgKiBXaWxsIG9ubHkgd29yayBvbiB0b3AgbGV2ZWwga2V5cGF0aHMgYW5kIHdpbGwgbm90IHV0aWxpemUgYW4gYEF0dHJpYnV0ZUNvbXBhcmVgLlxuICAgICAqIFVzZSBgZ2V0SXRlbUluSXRlbWAgdG8gdXRpbGl6ZSBhbiBgQXR0cmlidXRlQ29tcGFyZWAuXG4gICAgICogQHBhcmFtIHtLZXlQYXRoW119IGtleXMgXG4gICAgICovXG4gICAgZ2V0TXVsdGlwbGVJdGVtcyhrZXlzOiBLZXlQYXRoW10pOiBTdG9yYWdlVmFsdWVbXTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBpdGVtIHRvIGFuIGV4aXN0aW5nIGl0ZW0gb24gdGhlIHN0b3JhZ2UuIFdvcmtzIGZvciBvYmplY3QgYW5kIGFycmF5IHR5cGUgZGF0YS5cbiAgICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXlwYXRoIG9mIHRoZSBkYXRhIHlvdSB3YW50IHRvIGFwcGVuZCB0by5cbiAgICAgKiBAcGFyYW0ge1N0b3JhZ2VWYWx1ZX0gdmFsdWUgZGF0YSB2YWx1ZSB5b3Ugd2FudCB0byBhcHBlbmQgdG8uXG4gICAgICovXG4gICAgYXBwZW5kSXRlbUluSXRlbShrZXk6IEtleVBhdGgsIHZhbHVlOiBTdG9yYWdlVmFsdWUpOiBib29sZWFuIHwgRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGFuIGl0ZW0gaW4gdGhlIHNwZWNpZmllZCBrZXlwYXRoLlxuICAgICAqIEBwYXJhbSB7S2V5UGF0aH0ga2V5IGtleXBhdGggb2YgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIHtBdHRyaWJ1dGVDb21wYXJlfSBhdHRyQ29tcGFyZSBkYXRhIGtleSBhdHRyaWJ1dGUgdG8gYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICB1cGRhdGVJdGVtSW5JdGVtKGtleTogS2V5UGF0aCwgYXR0ckNvbXBhcmU6IEF0dHJpYnV0ZUNvbXBhcmUgfCBudWxsLCBuZXdWYWx1ZTogU3RvcmFnZVZhbHVlKTogYm9vbGVhbiB8IEVycm9yO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGluIHRoZSBzcGVjaWZpZWQga2V5cGF0aC5cbiAgICAgKiBAcGFyYW0ge0tleVBhdGh9IGtleSBrZXlwYXRoIG9mIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSB7QXR0cmlidXRlQ29tcGFyZX0gYXR0ckNvbXBhcmUgZGF0YSBrZXkgYXR0cmlidXRlIHRvIGJlIHVwZGF0ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlSXRlbUluSXRlbShrZXk6IEtleVBhdGgsIGF0dHJDb21wYXJlPzogQXR0cmlidXRlQ29tcGFyZSk6IGJvb2xlYW4gfCBFcnJvcjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZGF0YSBmb3VuZCBpbiB0aGUgc3BlY2lmaWVkIGtleXBhdGguXG4gICAgICogQHBhcmFtIHtLZXlQYXRofSBrZXkga2V5cGF0aCBvZiB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0ge0F0dHJpYnV0ZUNvbXBhcmV9IGF0dHJDb21wYXJlIGRhdGEga2V5IGF0dHJpYnV0ZSB0byBiZSB1cGRhdGVkLlxuICAgICAqL1xuICAgIGdldEl0ZW1Jbkl0ZW0oa2V5OiBLZXlQYXRoLCBhdHRyQ29tcGFyZT86IEF0dHJpYnV0ZUNvbXBhcmUpOiBTdG9yYWdlVmFsdWU7XG59Il0sIm1hcHBpbmdzIjoiIn0=