"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CryptorDefaults = exports.Cryptor = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.regexp.to-string.js");
var crypto = _interopRequireWildcard(require("crypto"));
var _nodeBuffer = require("node:buffer");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var {
  scryptSync,
  randomFillSync,
  createCipheriv,
  createDecipheriv
} = crypto;
var CryptorDefaults = {
  salt: 'salty',
  keyLength: 24,
  algorithm: 'aes-192-cbc',
  password: 'encrypted-web-storage-manager',
  byteLength: 16
};
exports.CryptorDefaults = CryptorDefaults;
var _options = /*#__PURE__*/new WeakMap();
var _encryptionKey = /*#__PURE__*/new WeakMap();
var _vector = /*#__PURE__*/new WeakMap();
var _createKey = /*#__PURE__*/new WeakSet();
class Cryptor {
  constructor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CryptorDefaults;
    var ivHex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    _classPrivateMethodInitSpec(this, _createKey);
    _classPrivateFieldInitSpec(this, _options, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _encryptionKey, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _vector, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _options, options);
    _classPrivateFieldSet(this, _encryptionKey, null);
    _classPrivateFieldSet(this, _vector, ivHex);
    if (!ivHex) {
      _classPrivateMethodGet(this, _createKey, _createKey2).call(this);
    }
  }
  get settings() {
    return _classPrivateFieldGet(this, _options);
  }
  get key() {
    return _classPrivateFieldGet(this, _encryptionKey);
  }
  get ivHex() {
    return _classPrivateFieldGet(this, _vector);
  }
  encrypt(subject) {
    if (_classPrivateFieldGet(this, _encryptionKey) && _classPrivateFieldGet(this, _vector)) {
      var {
        algorithm
      } = _classPrivateFieldGet(this, _options);
      var key = _nodeBuffer.Buffer.from(_classPrivateFieldGet(this, _encryptionKey), 'hex');
      var iv = _nodeBuffer.Buffer.from(_classPrivateFieldGet(this, _vector), 'hex');
      var cipher = createCipheriv(algorithm, key, iv);
      var encrypted = cipher.update(subject, 'utf8', 'hex');
      encrypted += cipher.final('hex');
      return encrypted;
    }
    return null;
  }
  decrypt(encrypted) {
    if (!!encrypted && _classPrivateFieldGet(this, _encryptionKey) && _classPrivateFieldGet(this, _vector)) {
      var {
        algorithm
      } = _classPrivateFieldGet(this, _options);
      var key = _nodeBuffer.Buffer.from(_classPrivateFieldGet(this, _encryptionKey), 'hex');
      var iv = _nodeBuffer.Buffer.from(_classPrivateFieldGet(this, _vector), 'hex');
      var decipher = createDecipheriv(algorithm, key, iv);
      var decrypted = decipher.update(encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
      return decrypted;
    }
    return null;
  }
}
exports.Cryptor = Cryptor;
function _createKey2() {
  var {
    salt,
    keyLength,
    password,
    byteLength
  } = _classPrivateFieldGet(this, _options);
  var key = scryptSync(password, salt, keyLength);
  _classPrivateFieldSet(this, _encryptionKey, key.toString('hex'));
  var buf = _nodeBuffer.Buffer.alloc(byteLength);
  randomFillSync(buf);
  _classPrivateFieldSet(this, _vector, buf.toString('hex'));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,